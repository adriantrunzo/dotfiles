function! PackInit() abort
  packadd minpac

  call minpac#init()
  call minpac#add('k-takata/minpac', #{ type: 'opt' })

  call minpac#add('HerringtonDarkholme/yats.vim')
  call minpac#add('LunarWatcher/auto-pairs')
  call minpac#add('airblade/vim-gitgutter')
  call minpac#add('andymass/vim-matchup')
  call minpac#add('dracula/vim', { 'name': 'dracula' })
  call minpac#add('eugen0329/vim-esearch')
  call minpac#add('hashivim/vim-terraform')
  call minpac#add('junegunn/fzf.vim')
  call minpac#add('justinmk/vim-sneak')
  call minpac#add('kana/vim-textobj-entire')
  call minpac#add('kana/vim-textobj-indent')
  call minpac#add('kana/vim-textobj-line')
  call minpac#add('kana/vim-textobj-user')
  call minpac#add('machakann/vim-highlightedyank')
  call minpac#add('machakann/vim-sandwich')
  call minpac#add('machakann/vim-swap')
  call minpac#add('mcchrish/nnn.vim')
  call minpac#add('neoclide/coc.nvim', #{ branch: 'release' })
  call minpac#add('maxmellon/vim-jsx-pretty')
  call minpac#add('pangloss/vim-javascript')
  call minpac#add('romainl/vim-cool')
  call minpac#add('svermeulen/vim-subversive')
  call minpac#add('tpope/vim-commentary')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('vim-airline/vim-airline-themes')
  call minpac#add('vim-ruby/vim-ruby')
endfunction

" Minpac commands:
" https://github.com/k-takata/minpac?tab=readme-ov-file#load-minpac-on-demand
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

" Autocommand group to use throughout this configuration file.
augroup Config
  autocmd!
augroup end

" Customize the dracula theme when it loads.
autocmd Config ColorScheme dracula call s:handle_colorscheme_dracula()

function! s:handle_colorscheme_dracula() abort
  highlight! link CurSearch IncSearch
  highlight! link GitGutterDelete DraculaRed
  highlight! link CocSearch DraculaCyan

  " Support --highlight-line.
  let g:fzf_colors['bg+'] = ['bg', 'CursorLine']
  let g:fzf_colors['fg+'] = ['fg', 'CursorLine']
  let g:fzf_colors.gutter = ['bg', 'Normal']
endfunction

" Cursor shape control.
if &term =~ "xterm"
  let &t_SI = "\e[5 q"
  let &t_SR = "\e[3 q"
  let &t_EI = "\e[1 q"
endif

" Enable filetype and indent detection.
filetype plugin indent on

" Enable syntax highlighting.
syntax enable

" Use the Dracula color scheme.
colorscheme dracula

" Create new lines at the same indentation level.
set autoindent

" Detect file changes outside of vim and reload those files if not changed.
set autoread

" Use colors suitable for a dark background. The colorscheme should also set
" this value.
set background=dark

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Don't put backup files in the current directory.
set backupdir^=$HOME/.vim/backup//

" Don't ring the bell.
set belloff=all

" Highlight the column after textwidth.
set colorcolumn=+1

" Don't put swap files in the current directory.
set directory^=$HOME/.vim/swap//

" Use utf-8 by default.
set encoding=utf-8

" Expand tabs to spaces in insert mode.
set expandtab

" Remove comment leader when joining lines.
set formatoptions+=j

" Allow for hidden buffers. Necessary for some plugins.
set hidden

" Highlight search results.
set hlsearch

" Ignore case when searching.
set ignorecase

" Show matches as search proceeds.
set incsearch

" Always show the status line.
set laststatus=2

" Show line numbers.
set number

" Make the line numbers relative.
set relativenumber

" Always show lines above and below cursor when scrolling.
set scrolloff=8

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use two spaces when indenting.
set shiftwidth=2

" Display the number of search results.
set shortmess-=S

" Don't show completion menu messages.
set shortmess+=c

" Don't show the intro message when starting vim.
set shortmess+=I

" Show a symbol for wrapped lines.
set showbreak=↪

" Show partial commands in the last line.
set showcmd

" Don't show the mode as vim-airline will already display it for us.
set noshowmode

" Make search case-sensitive if capital letters are used.
set smartcase

" Use two spaces for the tab key.
set softtabstop=2

" Open horizontal splits below.
set splitbelow

" Don't shift the buffer when splitting below.
set splitkeep=topline

" Open vertical splits to the right.
set splitright

" Enable true color.
set termguicolors

" Break text after 80 characters.
set textwidth=80

" Time out for key codes.
set ttimeout

" Wait up to 100ms after Esc for special key.
set ttimeoutlen=100

" Set the title of the terminal window appropriately.
set title

" Don't put undo files in the current directory.
set undodir^=$HOME/.vim/undo//

" Persistent undo.
set undofile

" Faster update time for git signs, etc.
set updatetime=500

" Enable wildmenu (command-line completion).
set wildmenu

" Use fuzzy matching and the pum for the wildmenu.
set wildoptions=fuzzy,pum

" Wrap long lines.
set wrap

if executable('fzf')
  if has('osx')
    " Load the fzf plugin included with the homebrew install.
    set rtp+=/opt/homebrew/opt/fzf
  endif
endif

" Ripgrep is much faster.
if executable("rg")
  set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
  set grepformat+=%f:%l:%c:%m
endif

" Use dracula in airline and remove all of the symbols.
let g:airline_theme='dracula'
let g:airline_symbols_ascii = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Remove the space before the line number prefix since we are removing the
" percentage indicator (see below).
let g:airline_symbols.linenr = 'ln:'

" Using autocomplete can make the mode block go crazy. Airline merges this
" variable on load, so don't overwrite it when we source vimrc again.
if !exists('g:airline_mode_map')
  let g:airline_mode_map = {
    \ 'ic' : 'INSERT',
    \ 'ix' : 'INSERT',
    \ }
endif

" Disable most extensions by default.
let g:airline_extensions = ['branch', 'coc', 'quickfix']

function! GetGitBranch(name) abort
  " Shortcut git branches contain the ticket identifier preceeded by "sc-".
  let story = matchstr(a:name, 'sc-\d\+')

  " Use the identifier segment if we found one.
  if (strlen(story) > 0)
    return story[:strlen(story) - 1]
  endif

  " Otherwise the first ten characters.
  return a:name[:9]
endfunction

" Use a custom function to get the git branch text.
let g:airline#extensions#branch#format = 'GetGitBranch'

" Remove the document percentage indicator.
function! s:handle_airline_init() abort
  let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', 'colnr'])
endfunction

autocmd Config User AirlineAfterInit call s:handle_airline_init()

" Delete brackets and quotes in pairs.
let g:AutoPairsMapBS = 1

" We'll manually map <CR> with autocomplete.
let g:AutoPairsMapCR = 0

" Update the vim indent options to use less space for line continuation.
let g:vim_indent = #{
  \ line_continuation: shiftwidth(),
  \ more_in_bracket_block: v:false,
  \ searchpair_timeout: 100,
  \ }

" Disable default mappings in the following plugins.
let g:nnn#set_default_mappings = 0
let g:sandwich_no_default_key_mappings = 1
let g:swap_no_default_key_mappings = 1

if !exists('g:fzf_vim')
  let g:fzf_vim = {}
endif

let g:fzf_vim.preview_window = []
let g:fzf_layout = { 'window': { 'width': 0.6, 'height': 0.4 } }

let g:fzf_files_customization = {
  \ 'options': [
  \   '--bind', 'ctrl-f:change-prompt(Files(all): )+reload(fd -t f -uL)',
  \   '--padding', '1',
  \   '--prompt', 'Files: ',
  \ ]
  \ }

let g:fzf_buffers_customization = {
  \ 'options': [
  \   '--padding', '1',
  \   '--prompt', 'Buffers: ',
  \ ]
  \ }

" Custom FZF commands.
command! -bang -complete=dir -nargs=? Files
  \ call fzf#vim#files(<q-args>, g:fzf_files_customization, <bang>0)
command! -bang -complete=dir -nargs=? Buffers
  \ call fzf#vim#buffers(<q-args>, g:fzf_buffers_customization, <bang>0)

" Use bars for git signs as they are easier to read at a glance.
let g:gitgutter_sign_added = '❙'
let g:gitgutter_sign_modified = '❙'
let g:gitgutter_sign_removed = '❙'
let g:gitgutter_sign_removed_first_line = '❙'
let g:gitgutter_sign_removed_above_and_below = '❙'
let g:gitgutter_sign_modified_removed = '❙'

" GitGutter signs take priority over LSP signs by default.
let g:gitgutter_sign_priority = 5

" More colorful JSX.
let g:vim_jsx_pretty_colorful_config = 1

" Don't show offscreen matches as they cause odd statusline issues.
let g:matchup_matchparen_offscreen = {}

" Opens the n³ window in the same window like netrw.
let g:nnn#layout = 'enew'

" Use n³ when opening directories instead of netrw.
let g:nnn#replace_netrw = 1

" n³ split actions.
let g:nnn#action = {
  \ '<c-h>': 'split',
  \ '<c-t>': 'tab split',
  \ '<c-v>': 'vsplit'
  \ }

" Use the sneak label mode for faster jumping.
let g:sneak#label = 1

" Coc Extensions. These should be automatically installed by coc.nvim.
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-eslint',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-tsserver',
  \ 'coc-vimlsp',
  \ '@yaegassy/coc-tailwindcss3'
  \ ]

" Swappable (eg arguments) text objects.
xmap a, <Plug>(swap-textobject-a)
omap a, <Plug>(swap-textobject-a)
xmap i, <Plug>(swap-textobject-i)
omap i, <Plug>(swap-textobject-i)

" Sandwich text-objects for matching characters.
xmap am <Plug>(textobj-sandwich-auto-a)
omap am <Plug>(textobj-sandwich-auto-a)
xmap im <Plug>(textobj-sandwich-auto-i)
omap im <Plug>(textobj-sandwich-auto-i)
xmap aq <Plug>(textobj-sandwich-query-a)
omap aq <Plug>(textobj-sandwich-query-a)
xmap iq <Plug>(textobj-sandwich-query-i)
omap iq <Plug>(textobj-sandwich-query-i)

" Matchup text-objects for larger syntactic blocks.
xmap aM <Plug>(matchup-a%)
omap aM <Plug>(matchup-a%)
xmap iM <Plug>(matchup-i%)
omap iM <Plug>(matchup-i%)

" Use space for leader.
let mapleader = ' '

" The basics.
nnoremap <Leader><Space> <Cmd>Files<CR>
nnoremap <Leader>b <Cmd>Buffers<CR>
nnoremap <Leader>e <Cmd>NnnPicker %:p:h<CR>
nnoremap <Leader>g <Cmd>Git<CR>

" Add lines above and below with entering insert mode.
nnoremap <Leader>o <Cmd>put=repeat([''],v:count)<Bar>'[-1<CR>
nnoremap <Leader>O <Cmd>put!=repeat([''],v:count)<Bar>']+1<CR>

" Paste from the system clipboard.
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P
xnoremap <Leader>p "*p
xnoremap <Leader>P "*P

" Yank to system clipboard.
nnoremap <Leader>y "*y
nnoremap <Leader>Y "*yg_
xnoremap <Leader>y "*y

" Convenient saving.
nnoremap <CR> <Cmd>update<CR>
nnoremap <S-CR> <Cmd>exit<CR>

" Quickly close a buffer.
nnoremap <Backspace> <Cmd>bdelete<CR>
nnoremap <S-Backspace> <Cmd>quit<CR>

" Jump between blocks.
nmap <Tab> <Plug>(matchup-z%)
nmap <S-Tab> <Plug>(matchup-Z%)

" Use tab for cycling through completion entries in insert mode.
inoremap <expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<Plug>AutoPairsReturn"
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Backslash is the same key as forward slash in the Engram layout.
noremap \ ?

" Reselect visual selection after indenting.
vnoremap < <gv
vnoremap > >gv

" Move vertically by visual line with wrapping enabled.
nnoremap j gj
nnoremap k gk

" Add LSP to K.
nnoremap K <Cmd>call <SID>show_documentation()<CR>

" Integrate LSP hover and keyword lookup.
function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Unused c-mappings: cd cm co cp cq cr cs cu cx cy cz
" cs is used for sneak.
" nnoremap <buffer> co <Cmd>LspOutline<CR>
" nnoremap <buffer> cpd <Cmd>LspPeekDefinition<CR>
" nnoremap <buffer> cpm <Cmd>LspPeekImpl<CR>
" nnoremap <buffer> cpr <Cmd>LspPeekReferences<CR>
" nnoremap <buffer> cpx <Cmd>LspPeekDeclaration<CR>
" nnoremap <buffer> cpy <Cmd>LspPeekTypeDef<CR>
nmap <silent> cd <Plug>(coc-definition)
nmap <silent> cm <Plug>(coc-implementation)
nmap <silent> cn <Plug>(coc-rename)
nmap <silent> cq <Plug>(coc-format)
nmap <silent> cr <Plug>(coc-references)
nmap <silent> cx <Plug>(coc-declaration)
nmap <silent> cy <Plug>(coc-type-definition)
nmap <silent> cz <Plug>(coc-codeaction-selected)

" Sandwich match mode.
nmap m <Nop>
xmap m <Nop>
omap m <Nop>
nmap ma <Plug>(sandwich-add)
xmap ma <Plug>(sandwich-add)
omap ma <Plug>(sandwich-add)
nmap md <Plug>(sandwich-delete)
xmap md <Plug>(sandwich-delete)
nmap mdd <Plug>(sandwich-delete-auto)
nmap mr <Plug>(sandwich-replace)
xmap mr <Plug>(sandwich-replace)
nmap mrr <Plug>(sandwich-replace-auto)

" Moving text.
nnoremap mk :m .-2<cr>==
vnoremap mk :m '<-2<cr>gv=gv
nnoremap mj :m .+1<cr>==
vnoremap mj :m '>+1<cr>gv=gv
nmap mh <Plug>(swap-prev)
nmap ml <Plug>(swap-next)
nmap gs <Plug>(swap-interactive)
xmap gs <Plug>(swap-interactive)

" Keep the cursor centered when going through search results.
nnoremap n nzzzv
nnoremap N Nzzzv

" Ex mode is rarely useful.
nnoremap q @
nnoremap Q q

" Use s for sneak in all modes.
omap s <Plug>Sneak_s
omap S <Plug>Sneak_S
xmap S <Plug>Sneak_S

" Better redo.
nnoremap U <C-r>

" x is silly by default.
nmap x <Nop>
xmap x <Nop>

" Substitute range with confirmation.
nmap xc <Plug>(SubversiveSubstituteRangeConfirm)
xmap xc <Plug>(SubversiveSubstituteRangeConfirm)
nmap xcc <Plug>(SubversiveSubstituteWordRangeConfirm)
"
" Use xp for "yank-paste", substituting the target without overwriting the
" unnamed buffer. In visual mode use P.
nmap xp <Plug>(SubversiveSubstitute)
nmap xpp <Plug>(SubversiveSubstituteLine)
nmap xP <Plug>(SubversiveSubstituteToEndOfLine)

" Substitute range without confirmation.
nmap xs <Plug>(SubversiveSubstituteRange)
xmap xs <Plug>(SubversiveSubstituteRange)
nmap xss <Plug>(SubversiveSubstituteWordRange)

" Unused y-mappings: yc yd ym yo yp yq yr ys yu yx yz
" Make Y behave as expected, though don't yank the trailing whitespace.
nnoremap Y yg_

" Maintain the cursor position when yanking a visual selection.
" http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap y myy`y
vnoremap Y myY`y

" Ctrl-D for <Del> when in middle of line, from rsi.vim.
inoremap <expr> <C-D> col('.')>strlen(getline('.'))?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"

" Previous.
nnoremap [b <Cmd>bprevious<CR>
nmap [d <Plug>(coc-diagnostic-prev)
nnoremap [l <Cmd>lprevious<CR>
nnoremap [q <Cmd>cprevious<CR>

" Next.
nnoremap ]b <Cmd>bnext<CR>
nmap ]d <Plug>(coc-diagnostic-next)
nnoremap ]l <Cmd>lnext<CR>
nnoremap ]q <Cmd>cnext<CR>

" https://stackoverflow.com/a/16360104
autocmd Config CmdWinEnter * nnoremap <buffer> <CR> <CR>
autocmd Config BufReadPost quickfix nnoremap <buffer> <CR> <CR>

" These files should be treated as JSONC.
autocmd Config BufNewFile,BufRead .eslintrc.json setlocal filetype=jsonc
autocmd Config BufNewFile,BufRead coc-settings.json setlocal filetype=jsonc
autocmd Config BufNewFile,BufRead tsconfig.json setlocal filetype=jsonc

" Use prettier for formatting with gq. Prettier doesn't seem to support range
" formatting via efm-langserver with lsp#lsp#FormatExpr(),
autocmd Config FileType css,html,json,jsonc,yaml call s:use_prettier()
autocmd Config FileType javascript,javascriptreact call s:use_prettier()
autocmd Config FileType typescript,typescriptreact call s:use_prettier()

function! s:use_prettier() abort
  " The yats.vim plugin sets a custom formatexpr that doesn't work well.
  setlocal formatexpr&
  setlocal formatprg=bunx\ prettier\ --log-level\ silent\ --stdin-filepath\ %
endfunction

" Open the quickfix and location windows automatically.
" https://noahfrederick.com/log/vim-streamlining-grep
autocmd Config QuickFixCmdPost [^l]* cwindow
autocmd Config QuickFixCmdPost l* lwindow

" Update signature help on jump placeholder.
autocmd Config User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

" Highlight the symbol and its references when holding the cursor.
autocmd Config CursorHold * silent call CocActionAsync('highlight')
