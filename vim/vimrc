" Manually set terminal features in Kitty until vim terminal feature detection
" is improved.
" https://sw.kovidgoyal.net/kitty/faq/#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
if &term == 'xterm-kitty'
    " Styled and colored underline support
    let &t_AU = "\e[58:5:%dm"
    let &t_8u = "\e[58:2:%lu:%lu:%lum"
    let &t_Us = "\e[4:2m"
    let &t_Cs = "\e[4:3m"
    let &t_ds = "\e[4:4m"
    let &t_Ds = "\e[4:5m"
    let &t_Ce = "\e[4:0m"

    " Strikethrough
    let &t_Ts = "\e[9m"
    let &t_Te = "\e[29m"

    " Truecolor support
    let &t_8f = "\e[38:2:%lu:%lu:%lum"
    let &t_8b = "\e[48:2:%lu:%lu:%lum"
    let &t_RF = "\e]10;?\e\\"
    let &t_RB = "\e]11;?\e\\"

    " Bracketed paste
    let &t_BE = "\e[?2004h"
    let &t_BD = "\e[?2004l"
    let &t_PS = "\e[200~"
    let &t_PE = "\e[201~"

    " Cursor control
    let &t_RC = "\e[?12$p"
    let &t_SH = "\e[%d q"
    let &t_RS = "\eP$q q\e\\"
    let &t_SI = "\e[5 q"
    let &t_SR = "\e[3 q"
    let &t_EI = "\e[1 q"
    let &t_VS = "\e[?12l"

    " Focus tracking
    let &t_fe = "\e[?1004h"
    let &t_fd = "\e[?1004l"
    execute "set <FocusGained>=\<Esc>[I"
    execute "set <FocusLost>=\<Esc>[O"

    " Window title
    let &t_ST = "\e[22;2t"
    let &t_RT = "\e[23;2t"
endif

" Enable filetype and indent detection.
filetype plugin indent on

" Enable syntax highlighting.
syntax enable

" Use the Dracula color scheme.
colorscheme dracula

" Create new lines at the same indentation level.
set autoindent

" Detect file changes outside of vim and reload those files if not changed.
set autoread

" Use colors suitable for a dark background. The colorscheme should also set
" this value.
set background=dark

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Don't put backup files in the current directory.
set backupdir^=$HOME/.vim/backup//

" Don't ring the bell.
set belloff=all

" Highlight the column after textwidth.
set colorcolumn=+1

" Don't put swap files in the current directory.
set directory^=$HOME/.vim/swap//

" Use utf-8 by default.
set encoding=utf-8

" Expand tabs to spaces in insert mode.
set expandtab

" Remove comment leader when joining lines.
set formatoptions+=j

" Allow for hidden buffers. Necessary for some plugins.
set hidden

" Highlight search results.
set hlsearch

" Ignore case when searching.
set ignorecase

" Show matches as search proceeds.
set incsearch

" Always show the status line.
set laststatus=2

" Show line numbers.
set number

" Make the line numbers relative.
set relativenumber

" Always show lines above and below cursor when scrolling.
set scrolloff=8

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use two spaces when indenting.
set shiftwidth=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Show a symbol for wrapped lines.
set showbreak=↪

" Show partial commands in the last line.
set showcmd

" Don't show the mode as vim-airline will already display it for us.
set noshowmode

" Make search case-sensitive if capital letters are used.
set smartcase

" Use two spaces for the tab key.
set softtabstop=2

" Open horizontal splits below.
set splitbelow

" Open vertical splits to the right.
set splitright

" Enable true color.
set termguicolors

" Break text after 80 characters.
set textwidth=80

" Time out for key codes.
set ttimeout

" Wait up to 100ms after Esc for special key.
set ttimeoutlen=100

" Set the title of the terminal window appropriately.
set title

" Don't put undo files in the current directory.
set undodir^=$HOME/.vim/undo//

" Persistent undo.
set undofile

" Faster update time for git signs, etc. 
set updatetime=500

" Enable wildmenu (command-line completion).
set wildmenu

" Use fuzzy matching and the pum for the wildmenu.
set wildoptions=fuzzy,pum

" Wrap long lines.
set wrap

if has('osx')
    " Load the fzf plugin included with the homebrew install.
    set rtp+=/usr/local/opt/fzf
endif

" Use space for leader. 
let mapleader = ' '

" Use dracula in airline and remove all of the symbols.
let g:airline_theme='dracula'
let g:airline_symbols_ascii = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Remove the space before the line number prefix since we are removing the
" percentage indicator (see below).
let g:airline_symbols.linenr = 'ln:'

" Disable most extensions by default.
let g:airline_extensions = ['branch', 'coc', 'quickfix']

" Use a custom function to get the git branch text.
let g:airline#extensions#branch#format = 'GetGitBranch'

" Open FZF in a new buffer at the bottom.
let g:fzf_layout = { 'window': '12new' }

" Update the vim indent options to use less space for line continuation.
let g:vim_indent = #{
  \ line_continuation: shiftwidth(),
  \ more_in_bracket_block: v:false,
  \ searchpair_timeout: 100,
  \ }

" Disable default mappings in the following plugins.
let g:nnn#set_default_mappings = 0
let g:sandwich_no_default_key_mappings = 1
let g:swap_no_default_key_mappings = 1

" More colorful JSX.
let g:vim_jsx_pretty_colorful_config = 1

" Don't show offscreen matches as they cause odd statusline issues.
let g:matchup_matchparen_offscreen = {}

" Opens the n³ window in the same window like netrw.
let g:nnn#layout = 'enew'

" Use n³ when opening directories instead of netrw.
let g:nnn#replace_netrw = 1

" n³ split actions.
let g:nnn#action = {
  \ '<c-t>': 'tab split',
  \ '<c-s>': 'split',
  \ '<c-v>': 'vsplit'
  \ }

" Use the sneak label mode for faster jumping.
let g:sneak#label = 1

" Coc Extensions. These should be automatically installed by coc.nvim.
let g:coc_global_extensions = [
  \ 'coc-css',
  \ 'coc-cssmodules',
  \ 'coc-eslint',
  \ 'coc-git',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-prettier',
  \ 'coc-tsserver',
  \ 'coc-vimlsp'
  \ ]

if executable("rg")
    set grepprg=rg\ --vimgrep\ --smart-case\ --hidden
    set grepformat+=%f:%l:%c:%m
endif

" Swappable (eg arguments) text objects.
xmap i, <Plug>(swap-textobject-i)
omap i, <Plug>(swap-textobject-i)
xmap a, <Plug>(swap-textobject-a)
omap a, <Plug>(swap-textobject-a)

" Sandwich text-objects for surrounding characters.
xmap is <Plug>(textobj-sandwich-auto-i)
omap is <Plug>(textobj-sandwich-auto-i)
xmap as <Plug>(textobj-sandwich-auto-a)
omap as <Plug>(textobj-sandwich-auto-a)
xmap im <Plug>(textobj-sandwich-query-i)
omap im <Plug>(textobj-sandwich-query-i)
xmap am <Plug>(textobj-sandwich-query-a)
omap am <Plug>(textobj-sandwich-query-a)

" Using enter and backspace for "open" is more intuitive.
nnoremap <CR> o
vnoremap <CR> o
nnoremap <S-CR> <Cmd>put=repeat([''],v:count)<Bar>'[-1<CR>
nnoremap <Backspace> O
vnoremap <Backspace> O
nnoremap <S-Backspace> <Cmd>put!=repeat([''],v:count)<Bar>']+1<CR>

" Use tab for cycling through completion entries in insert mode.
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Backslash is the same key as forward slash in the Engram layout.
noremap \ ?

" You have a question about something?
nnoremap ? <Cmd>call <SID>show_documentation()<CR>
vnoremap ? K

" Reselect visual selection after indenting.
vnoremap < <gv
vnoremap > >gv

" Quick change the word under the cursor.
nmap cn *``cgn
nmap cN *``cgN

" Move vertically by visual line with wrapping enabled.
nnoremap j gj
nnoremap k gk

" Convenient join without spaces.
nnoremap K gJ

" Moving around with sneak.
nmap m <Plug>Sneak_s
xmap m <Plug>Sneak_s
omap m <Plug>Sneak_s
nmap M <Plug>Sneak_S
xmap M <Plug>Sneak_S
omap M <Plug>Sneak_S

" Keep the cursor centered when going through search results.
nnoremap n nzzzv
nnoremap N Nzzzv

" Use o for controlling comments.
xmap o <Plug>Commentary
nmap o <Plug>Commentary
omap o <Plug>Commentary
nmap oo <Plug>CommentaryLine
nmap O <Plug>Commentary<Plug>Commentary

" Ex mode is rarely useful.
nnoremap q @
nnoremap Q q

" Use s for vim-sandwich, but tweak the defaults slightly.
nmap s <Nop>
xmap s <Nop>
nmap sa <Plug>(sandwich-add)
xmap sa <Plug>(sandwich-add)
omap sa <Plug>(sandwich-add)
nmap sd <Plug>(sandwich-delete)
xmap sd <Plug>(sandwich-delete)
nmap sdd <Plug>(sandwich-delete-auto)
nmap sr <Plug>(sandwich-replace)
xmap sr <Plug>(sandwich-replace)
nmap srr <Plug>(sandwich-replace-auto)

" Quickly select syntactic ranges.
xmap <silent> X <Plug>(coc-range-select-backward)
nmap <silent> x <Plug>(coc-range-select)
xmap <silent> x <Plug>(coc-range-select)

" Better redo.
nnoremap U <C-r>

" Make Y behave as expected, though don't yank the trailing whitespace.
nnoremap Y yg_

" Maintain the cursor position when yanking a visual selection.
" http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap y myy`y
vnoremap Y myY`y

" Ctrl-D for <Del> when in middle of line, from rsi.vim.
inoremap <expr> <C-D> col('.')>strlen(getline('.'))?"\<Lt>C-D>":"\<Lt>Del>"
cnoremap <expr> <C-D> getcmdpos()>strlen(getcmdline())?"\<Lt>C-D>":"\<Lt>Del>"

" Previous.
nnoremap <A-B> <Cmd>bprevious<CR>
nmap <A-D> <Plug>(coc-diagnostic-prev)
nnoremap <A-L> <Cmd>lprevious<CR>
nnoremap <A-Q> <Cmd>cprevious<CR>

" Next.
nnoremap <A-b> <Cmd>bnext<CR>
nmap <A-d> <Plug>(coc-diagnostic-next)
nnoremap <A-l> <Cmd>lnext<CR>
nnoremap <A-q> <Cmd>cnext<CR>

" Moving text.
nnoremap <A-Up> :m .-2<cr>==
vnoremap <A-Up> :m '<-2<cr>gv=gv
nnoremap <A-Down> :m .+1<cr>==
vnoremap <A-Down> :m '>+1<cr>gv=gv
nmap <A-Left> <Plug>(swap-prev)
nmap <A-Right> <Plug>(swap-next)

nnoremap <Leader><Space> <Cmd>FZF<CR>
nnoremap <Leader><CR> <Cmd>update<CR>
nnoremap <Leader><S-CR> <Cmd>exit<CR>
nnoremap <Leader><Backspace> <Cmd>bdelete<CR>
nnoremap <Leader><S-Backspace> <Cmd>quit<CR>
nnoremap <Leader>b <Cmd>CocList buffers<CR>
nmap <Leader>ca <Plug>(coc-codeaction-selected)
nmap <Leader>cd <Plug>(coc-definition)
nmap <Leader>cf <Plug>(coc-format)
nmap <Leader>cl <Plug>(coc-declaration)
nmap <Leader>cm <Plug>(coc-implementation)
nmap <Leader>cn <Plug>(coc-rename)
nmap <Leader>cr <Plug>(coc-references)
nmap <Leader>ct <Plug>(coc-type-definition)
nnoremap <Leader>d <Cmd>CocList diagnostics<CR>
nnoremap <Leader>e <Cmd>NnnPicker %:p:h<CR>
nnoremap <Leader>g <Cmd>Git<CR>
nnoremap <Leader>n <Cmd>nohlsearch<CR>
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P
xnoremap <Leader>p "*p
nnoremap <Leader>vc <cmd>edit $MYVIMRC<cr>
nnoremap <Leader>vr <cmd>source $MYVIMRC<cr>
nnoremap <Leader>y "*y
nnoremap <Leader>Y "*Y
xnoremap <Leader>y "*y

augroup Config
    autocmd!
    " https://stackoverflow.com/a/16360104
    autocmd CmdWinEnter * call s:reset_cr_mappings()
    autocmd BufReadPost * if !empty(&bt) | call s:reset_cr_mappings() | endif

    " These files should be treated as JSONC.
    autocmd BufNewFile,BufRead coc-settings.json setlocal filetype=jsonc
    autocmd BufNewFile,BufRead .eslintrc.json setlocal filetype=jsonc
    autocmd BufNewFile,BufRead tsconfig.json setlocal filetype=jsonc

    " Filetype specific settings.
    autocmd FileType css,scss call s:handle_ft_css()
    autocmd FileType fzf call s:handle_ft_fzf()
    autocmd FileType html call s:handle_ft_html()
    autocmd FileType javascript,javascriptreact call s:handle_ft_javascript()
    autocmd FileType json call s:handle_ft_json()
    autocmd FileType qf call s:handle_ft_qf()
    autocmd FileType typescript,typescriptreact call s:handle_ft_typescript()
    autocmd FileType vim call s:handle_ft_vim()

    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Call airline customization method.
    autocmd User AirlineAfterInit call s:handle_airline_init()
augroup end

function! s:handle_ft_css() abort
    setlocal formatexpr=CocAction('formatSelected')
endfunction

function! s:handle_ft_fzf() abort
    " Hide the status line on the bottom window temporarily.
    set laststatus=0
    autocmd BufLeave <buffer> set laststatus=2
endfunction

function! s:handle_ft_html() abort
    setlocal formatexpr=CocAction('formatSelected')
endfunction

function! s:handle_ft_javascript() abort
    setlocal formatexpr=CocAction('formatSelected')
endfunction

function! s:handle_ft_json() abort
    setlocal formatexpr=CocAction('formatSelected')
endfunction

function! s:handle_ft_qf() abort
    setlocal norelativenumber
    setlocal nowrap

    augroup QFConfig
      autocmd!
      autocmd BufEnter <buffer> setlocal scrolloff=0
      autocmd BufLeave <buffer> setlocal scrolloff=-1
    augroup END

    call s:reset_cr_mappings()
endfunction

function! s:handle_ft_typescript() abort
    setlocal formatexpr=CocAction('formatSelected')
endfunction

function! s:handle_ft_vim() abort
    " Use 4 spaces for indendation rather than the default 2.
    setlocal shiftwidth=4
    setlocal softtabstop=4
endfunction

" Remove the document percentage indicator.
function! s:handle_airline_init() abort
    let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', 'colnr'])
endfunction

function! s:reset_cr_mappings() abort
    noremap <buffer> <BS> <BS>
    noremap <buffer> <CR> <CR>
endfunction

" Inegrate LSP hover and keyword lookup.
function! s:show_documentation()
    if CocAction('hasProvider', 'hover')
        call CocActionAsync('doHover')
    else
        call feedkeys('K', 'in')
    endif
endfunction

function! GetGitBranch(name) abort
    " Shortcut git branches contain the ticket identifier preceeded by "sc-".
    let story = matchstr(a:name, 'sc-\d\+')

    " Use the identifier segment if we found one.
    if (strlen(story) > 0)
        return story[:strlen(story) - 1]
    endif

    " Otherwise the first ten characters.
    return a:name[:9]
endfunction
