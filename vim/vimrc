if has('osx')
  " Change the cursor shape depending upon the mode.
  " https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
  let &t_SI.="\e[5 q" "SI = INSERT mode
  let &t_SR.="\e[4 q" "SR = REPLACE mode
  let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

  " Load the fzf plugin included with the homebrew install.
  set rtp+=/usr/local/opt/fzf
endif

" Enable filetype and indent detection.
filetype plugin indent on

" Enable syntax highlighting.
syntax enable

" Use the Dracula color scheme.
colorscheme dracula

" Create new lines at the same indentation level.
set autoindent

" Detect file changes outside of vim and reload those files if not changed.
set autoread

" Use colors suitable for a dark background. The colorscheme should also set
" this value.
set background=dark

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Don't put backup files in the current directory.
set backupdir^=$HOME/.vim/backup//

" Don't ring the bell.
set belloff=all

" Highlight the column after textwidth.
set colorcolumn=+1

" Don't put swap files in the current directory.
set directory^=$HOME/.vim/swap//

" Use utf-8 by default.
set encoding=utf-8

" Expand tabs to spaces in insert mode.
set expandtab

" Remove comment leader when joining lines.
set formatoptions+=j

" Allow for hidden buffers. Necessary for some plugins.
set hidden

" Highlight search results.
set hlsearch

" Ignore case when searching.
set ignorecase

" Show matches as search proceeds.
set incsearch

" Show line numbers.
set number

" Make the line numbers relative.
set relativenumber

" Always show lines above and below cursor when scrolling.
set scrolloff=8

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use two spaces when indenting.
set shiftwidth=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Show a symbol for wrapped lines.
set showbreak=â†ª

" Show partial commands in the last line.
set showcmd

" Don't show the mode as vim-airline will already display it for us.
set noshowmode

" Make search case-sensitive if capital letters are used.
set smartcase

" Use two spaces for the tab key.
set softtabstop=2

" Open new splits in a more "natural" direction; below for horizontal splits and
" to the right for vertical splits.
set splitbelow
set splitright

" Enable true color.
set termguicolors

" Break text after 80 characters.
set textwidth=80

" Time out for key codes.
set ttimeout

" Wait up to 100ms after Esc for special key.
set ttimeoutlen=100

" Set the title of the terminal window appropriately.
set title

" Don't put undo files in the current directory.
set undodir^=$HOME/.vim/undo//

" Persistent undo.
set undofile

" coc.nvim recommends a lower updatetime, which is used by the highlight on
" CursorHold feature.
set updatetime=500

" Enable wildmenu (command-line completion).
set wildmenu

" List all matches and complete the first match.
set wildmode=list:full

" Wrap long lines.
set wrap

" Leave s for sneak.
" https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
runtime START macros/sandwich/keymap/surround.vim

" Text objects to select the nearest surrounded text automatically.
xmap iss <Plug>(textobj-sandwich-auto-i)
xmap ass <Plug>(textobj-sandwich-auto-a)
omap iss <Plug>(textobj-sandwich-auto-i)
omap ass <Plug>(textobj-sandwich-auto-a)

" Swappable (eg arguments) text objects.
xmap i, <Plug>(swap-textobject-i)
omap i, <Plug>(swap-textobject-i)
xmap a, <Plug>(swap-textobject-a)
omap a, <Plug>(swap-textobject-a)

" Move vertically by visual line with wrapping enabled.
nnoremap j gj
nnoremap k gk

" Maintain the cursor position when joining lines.
nnoremap J mzJ`z

" Integrate LSP into keyword lookup.
nnoremap K <Cmd>call ShowDocumentation()<CR>

" Ex mode is rarely useful. 
nnoremap Q <Cmd>quit<CR>

" Better redo.
nnoremap U <C-r>

" Make Y behave as expected, though don't yank the trailing whitespace.
nnoremap Y yg_

" Reselect visual selection after indenting.
vnoremap < <gv
vnoremap > >gv

" Maintain the cursor position when yanking a visual selection.
" http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap y myy`y
vnoremap Y myY`y

" Keep the cursor centered when going through search results.
nnoremap n nzzzv
nnoremap N Nzzzv

" Quick change the word under the cursor.
nmap cu *``cgn
nmap cU *``cgN

" Move lines up and down.
nnoremap <c-j> :m .+1<cr>==
nnoremap <c-k> :m .-2<cr>==
vnoremap <c-j> :m '>+1<cr>gv=gv
vnoremap <c-k> :m '<-2<cr>gv=gv

" Autocompletion: Use enter to trigger completions and tab to cycle options.
inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
inoremap <expr> <Tab> coc#pum#visible() ? coc#pum#next(1) : "\<Tab>"
inoremap <expr> <S-Tab> coc#pum#visible() ? coc#pum#prev(1) : "\<S-Tab>"

" Remap <C-f> and <C-b> for scroll float windows/popups.
nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<C-r>=coc#float#scroll(0)\<CR>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Use space for leader. 
let mapleader = ' '

" Fuzzy open files quickly.
nnoremap <Leader><Space> <Cmd>Files<CR>

" Use a big button for saving!
nnoremap <Leader><CR> <Cmd>update<CR>

nnoremap <Leader>bb <Cmd>Buffers<CR>
nnoremap <Leader>bd <Cmd>bdelete<cr>
nnoremap <Leader>bp <Cmd>bprevious<cr>
nnoremap <Leader>bn <Cmd>bnext<cr>
nmap <Leader>ca <plug>(coc-codeaction)
nmap <Leader>cc <plug>(coc-fix-current)
nmap <Leader>cd <plug>(coc-definition)
nmap <Leader>cf <plug>(coc-refactor)
nmap <Leader>ci <plug>(coc-implementation)
nmap <Leader>cl <plug>(coc-codelens-action)
nmap <Leader>cn <plug>(coc-rename)
nmap <Leader>cr <plug>(coc-references)
nmap <Leader>cs <plug>(coc-codeaction-selected)
xmap <Leader>cs <plug>(coc-codeaction-selected)
nmap <Leader>ct <plug>(coc-type-definition)
nmap <Leader>dp <plug>(coc-diagnostic-prev)
nmap <Leader>dn <plug>(coc-diagnostic-next)
nnoremap <Leader>e <Cmd>NnnPicker %:p:h<CR>
nnoremap <Leader>g <Cmd>Git<cr>
nnoremap <Leader>n <Cmd>noh<cr>
nnoremap <Leader>op <Cmd>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <Leader>on <Cmd>put=repeat([''],v:count)<bar>'[-1<cr>
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P
xnoremap <Leader>p "*p
nnoremap <Leader>qc <Cmd>cclose<cr>
nnoremap <Leader>qp <Cmd>cprevious<cr>
nnoremap <Leader>qn <Cmd>cnext<cr>
nnoremap <Leader>qo <Cmd>copen<cr>
nmap <Leader>se <Plug>CtrlSFCwordPath
vmap <Leader>se <Plug>CtrlSFVwordPath
nmap <Leader>sp <Plug>CtrlSFPrompt
nmap <Leader>ss <Plug>CtrlSFCwordExec
vmap <Leader>ss <Plug>CtrlSFVwordExec
nnoremap <Leader>st <Cmd>CtrlSFToggle<CR>
nnoremap <Leader>su <Cmd>CtrlSFUpdate<CR>
nnoremap <Leader>vc <Cmd>edit $MYVIMRC<cr>
nnoremap <Leader>vr <Cmd>source $MYVIMRC<cr>
nnoremap <Leader>w1 <c-w>1w
nnoremap <Leader>w2 <c-w>2w
nnoremap <Leader>w3 <c-w>3w
nnoremap <Leader>w4 <c-w>4w
nnoremap <Leader>w5 <c-w>5w
nnoremap <Leader>w6 <c-w>6w
nnoremap <Leader>w7 <c-w>7w
nnoremap <Leader>w8 <c-w>8w
nnoremap <Leader>wn <c-w>w
nnoremap <Leader>wp <c-w>W
nnoremap <Leader>ws <c-w>s
nnoremap <Leader>wv <c-w>v
nnoremap <Leader>ww <c-w>n
nnoremap <Leader>x <Cmd>exit<cr>
nnoremap <Leader>y "*y
nnoremap <Leader>Y "*Y
xnoremap <Leader>y "*y

" Use the sneak label mode for faster jumping.
let g:sneak#label = 1

" Use the mapping defined above to open the file explorer.
let g:nnn#set_default_mappings = 0

" Use floating window for nnn.
let g:nnn#layout = { 'window': { 'width': 0.8, 'height': 0.8, 'highlight': 'Comment' } }

" Make the fuzzy finder floating window bigger.
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }

" Coc Extensions. These should be automatically installed by coc.nvim.
let g:coc_global_extensions = [
      \ "coc-css",
      \ 'coc-cssmodules',
      \ 'coc-eslint',
      \ 'coc-go',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-solargraph',
      \ 'coc-tsserver',
      \ 'coc-vimlsp'
      \ ]

" More colorful JSX.
let g:vim_jsx_pretty_colorful_config = 1

" Use dracula in airline and remove all of the symbols.
let g:airline_theme='dracula'
let g:airline_symbols_ascii = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Remove the space before the line number prefix since we are removing the
" percentage indicator (see below).
let g:airline_symbols.linenr = 'ln:'

" Disable most extensions by default.
let g:airline_extensions = ['branch', 'coc', 'quickfix']

" Use a custom function to get the git branch text.
let g:airline#extensions#branch#format = 'GetGitBranch'

" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

augroup CocEvents
  autocmd!
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup end

augroup AirlineEvents
  autocmd!
  autocmd User AirlineAfterInit call AirlineInit()
augroup end

" Remove the document percentage indicator.
function! AirlineInit() abort
  let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', 'colnr'])
endfunction

function! GetGitBranch(name) abort
  " Shortcut git branches contain the ticket identifier preceeded by "sc-".
  let story = matchstr(a:name, 'sc-\d\+')

  " Use the identifier segment if we found one.
  if (strlen(story) > 0)
    return story[:strlen(story) - 1]
  endif

  " Otherwise the first ten characters.
  return a:name[:9]
endfunction

" Show documentation in preview window.
function! ShowDocumentation() abort
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

let s:RE_WORD = '\%(\w\+\)'
let s:RE_ATTR_NAME = '\%([a-zA-Z0-9\-_:@.]\+\)'
let s:RE_QUOTED_STR = '\%(".\{-}"\|''.\{-}''\)'
let s:RE_JSX_BLOCK = '\%({\_.\{-}\%(}}\|}\)\%(\/>\|[ \n>]\)\@=\)'
let s:RE_ATTR_VALUE = '\%(' . s:RE_QUOTED_STR . '\|' . s:RE_WORD . '\|' . s:RE_JSX_BLOCK . '\)'
let s:RE_ATTR_RHS = '\%(=' . s:RE_ATTR_VALUE . '\)\='
let s:RE_ATTR = '\%(' . s:RE_ATTR_NAME . s:RE_ATTR_RHS . '\)'
let s:RE_ATTR_WITH_SPACE = '\%(\_s*' . s:RE_ATTR . '\)'
" let s:RE_ATTR_A = '\(' . s:RE_ATTR_WITH_SPACE . '\)'
" let s:RE_JSX_TAG = '<?\?\h\w*\_s*\zs\%(' . s:RE_ATTR_WITH_SPACE . '\)*\ze\_s*/\?>'

call textobj#user#plugin('tagattr', {
\   'attr-i': {
\     'pattern': s:RE_ATTR,
\     'select': 'ix',
\   },
\   'attr-a': {
\     'pattern': s:RE_ATTR_WITH_SPACE,
\     'select': 'ax',
\   },
\ })
