" No vi compatibility.
set nocompatible

if has('osx')
  " Change the cursor shape depending upon the mode.
  " https://vim.fandom.com/wiki/Change_cursor_shape_in_different_modes
  let &t_SI.="\e[5 q" "SI = INSERT mode
  let &t_SR.="\e[4 q" "SR = REPLACE mode
  let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

  " By default, Mac terminals receive alt-key sequences as special characters.
  " Kitty and other terminals can be configured to use option as meta, but vim
  " ends up receiving escape sequences like ^]j. These escape sequences can have
  " unintended effects in macros. It's easier just to map meta sequences to the
  " special characters.
  " https://stackoverflow.com/questions/7501092/can-i-map-alt-key-in-vim
  set <m-h>=˙
  set <m-j>=∆
  set <m-k>=˚
  set <m-l>=¬
endif

" vim-polyglot includes vim-sensible by default. It needs to be disabled
" before the plugin is loaded.
let g:polyglot_disabled = ['sensible']

" Set the leader before plugins might add their own mappings.
let mapleader = ' '

" Install vim-plug if not found
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
      \| PlugInstall --sync | source $MYVIMRC
      \| endif

call plug#begin()

Plug 'airblade/vim-gitgutter'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'fladson/vim-kitty'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'justinmk/vim-sneak'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-indent'
Plug 'knubie/vim-kitty-navigator', {'do': 'cp ./*.py ~/.config/kitty/'}
Plug 'lambdalisue/fern.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'machakann/vim-sandwich'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'sgur/vim-textobj-parameter'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" Use vim-surround operator mappings to not conflict with vim-sneak, but keep
" the default textobj mappings.
runtime macros/sandwich/keymap/surround.vim
unlet! g:sandwich_no_default_key_mappings
unlet! g:textobj_sandwich_no_default_key_mappings

" Enable filetype and indent detection.
filetype plugin indent on

" Enable syntax highlighting.
syntax enable

" Use the Dracula color scheme.
colorscheme dracula

" Create new lines at the same indentation level.
set autoindent

" Detect file changes outside of vim and reload those files if not changed.
set autoread

" Use colors suitable for a dark background. The colorscheme should also set
" this value.
set background=dark

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Don't put backup files in the current directory.
set backupdir^=$HOME/.vim/backup//

" Don't ring the bell.
set belloff=all

" Highlight the column after textwidth.
set colorcolumn=+1

" Don't put swap files in the current directory.
set directory^=$HOME/.vim/swap//

" Use utf-8 by default.
set encoding=utf-8

" Expand tabs to spaces in insert mode.
set expandtab

" Remove comment leader when joining lines.
set formatoptions+=j

" Allow for hidden buffers. Necessary for some plugins.
set hidden

" Highlight search results.
set hlsearch

" Ignore case when searching.
set ignorecase

" Show matches as search proceeds.
set incsearch

" Show line numbers.
set number

" Make the line numbers relative.
set relativenumber

" Always show lines above and below cursor when scrolling.
set scrolloff=8

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use two spaces when indenting.
set shiftwidth=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Show a symbol for wrapped lines.
set showbreak=↪

" Show partial commands in the last line.
set showcmd

" Don't show the mode as vim-airline will already display it for us.
set noshowmode

" Make search case-sensitive if capital letters are used.
set smartcase

" Use two spaces for the tab key.
set softtabstop=2

" Open new splits in a more "natural" direction; below for horizontal splits and
" to the right for vertical splits.
set splitbelow
set splitright

" Enable true color.
set termguicolors

" Break text after 80 characters.
set textwidth=80

" Time out for key codes.
set ttimeout

" Wait up to 100ms after Esc for special key.
set ttimeoutlen=100

" Set the title of the terminal window appropriately.
set title

" Don't put undo files in the current directory.
set undodir^=$HOME/.vim/undo//

" Persistent undo.
set undofile

" coc.nvim recommends a lower updatetime, which is used by the highlight on
" CursorHold feature.
set updatetime=500

" Enable wildmenu (command-line completion).
set wildmenu

" List all matches and complete the first match.
set wildmode=list:full

" Wrap long lines.
set wrap

" Resize splits when the window is resized.
au VimResized * :wincmd =

augroup Typescript
    autocmd!
    " The .tsx extension isn't always used with react files.
    autocmd BufNewFile,BufRead *.ts set filetype=typescriptreact
augroup END

" Better redo.
nnoremap U <c-r>

" Make Y behave as expected, though don't yank the trailing whitespace.
nnoremap Y yg_

" Reselect visual selection after indenting.
vnoremap < <gv
vnoremap > >gv

" Maintain the cursor position when yanking a visual selection.
" http://ddrscott.github.io/blog/2016/yank-without-jank/
vnoremap y myy`y
vnoremap Y myY`y

" Keep the cursor centered when going through search results.
nnoremap n nzzzv
nnoremap N Nzzzv

" Maintain the cursor position when joining lines.
nnoremap J mzJ`z

" Move lines up and down.
nnoremap <m-j> :m .+1<cr>==
nnoremap <m-k> :m .-2<cr>==
inoremap <m-j> <esc>:m .+1<cr>==gi
inoremap <m-k> <esc>:m .-2<cr>==gi
vnoremap <m-j> :m '>+1<cr>gv=gv
vnoremap <m-k> :m '<-2<cr>gv=gv

" Quick change the word under the cursor.
nnoremap cu *``cgn
nnoremap cU *``cgN

" Leader mappings
nnoremap <leader>a <cmd>Files<cr>
nmap <leader>ca <plug>(coc-codeaction)
nmap <leader>cc <plug>(coc-fix-current)
nmap <leader>cd <plug>(coc-definition)
nmap <leader>cf <plug>(coc-refactor)
nmap <leader>ci <plug>(coc-implementation)
nmap <leader>cl <plug>(coc-codelens-action)
nmap <leader>cm <plug>(coc-rename)
nmap <leader>cn <plug>(coc-diagnostic-next)
nmap <leader>cp <plug>(coc-diagnostic-prev)
nmap <leader>cr <plug>(coc-references)
nmap <leader>cs <plug>(coc-codeaction-selected)
xmap <leader>cs <plug>(coc-codeaction-selected)
nmap <leader>ct <plug>(coc-type-definition)
nnoremap <leader>d <cmd>bdelete<cr>
nnoremap <leader>e <cmd>Fern . -reveal=%<cr>
nnoremap <leader>g <cmd>Git<cr>
nnoremap <leader>i <cmd>Rg<cr>
nnoremap <leader>n <cmd>noh<cr>
nnoremap <leader>o <cmd>GFiles --exclude-standard --others --cached<cr>
nnoremap <leader>p "*gp
vnoremap <leader>p "*gp
nnoremap <leader>q <cmd>quit<cr>
nnoremap <leader>s <cmd>update<cr>
nnoremap <leader>u <cmd>Buffers<cr>
nnoremap <leader>vc <cmd>edit $MYVIMRC<cr>
nnoremap <leader>vr <cmd>source $MYVIMRC<cr>
nnoremap <leader>x <cmd>exit<cr>
nnoremap <leader>y "*y
vnoremap <leader>y "*y

nnoremap <silent> K <cmd>call <sid>show_documentation()<cr>

" Allow scrolling of the floating LSP windows with <c-f> and <c-b>.
nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Make the fuzzy finder floating window bigger.
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let $FZF_DEFAULT_OPTS = '--info=inline'

" CoC Extensions. These should be automatically installed by coc.nvim.
let g:coc_global_extensions = [
      \ "coc-css",
      \ 'coc-cssmodules',
      \ 'coc-eslint',
      \ 'coc-html',
      \ 'coc-json',
      \ 'coc-prettier',
      \ 'coc-tsserver',
      \ 'coc-vimlsp'
      \ ]

augroup CocEvents
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')

  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup end

" Show documentation in preview window.
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Trigger completions with enter.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<cr>"

" Navigate completions with Tab.
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use dracula and keep it simple.
let g:airline_theme='dracula'
let g:airline_symbols_ascii = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" Remove the space before the line number prefix since we are removing the
" percentage indicator (see below).
let g:airline_symbols.linenr = 'ln:'

" Disable most extensions by default.
let g:airline_extensions = ['branch', 'coc', 'fern']

" Use a custom function to get the git branch text.
let g:airline#extensions#branch#format = 'GetGitBranch'

function! GetGitBranch(name) abort
  " Shortcut git branches contain the ticket identifier preceeded by "sc-".
  let story = matchstr(a:name, 'sc-\d\+')

  " Use the identifier segment if we found one.
  if (strlen(story) > 0)
    return story[:strlen(story) - 1]
  endif

  " Otherwise the first ten characters.
  return a:name[:9]
endfunction

" Remove the document percentage indicator.
function! AirlineInit() abort
  let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', 'colnr'])
endfunction
autocmd User AirlineAfterInit call AirlineInit()

" More colorful JSX.
let g:vim_jsx_pretty_colorful_config = 1

function! FernInit() abort
  nmap <buffer><expr>
      \ <Plug>(fern-smart-enter)
      \ fern#smart#leaf(
      \   "\<Plug>(fern-action-open)",
      \   "\<Plug>(fern-action-expand)",
      \   "\<Plug>(fern-action-collapse)",
      \ )

  nmap <buffer> <cr> <plug>(fern-smart-enter)
endfunction

augroup FernEvents
  autocmd!
  autocmd FileType fern call FernInit()
augroup END

" Use vim-sneak label mode.
let g:sneak#label = 1
